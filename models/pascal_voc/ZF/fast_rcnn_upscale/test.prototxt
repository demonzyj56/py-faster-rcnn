name: "ZF"

input: "data"
input_shape {
  dim: 1
  dim: 3
  dim: 224
  dim: 224
}

input: "rois"
input_shape {
  dim: 1 # to be changed on-the-fly to num ROIs
  dim: 5 # [batch ind, x1, y1, x2, y2] zero-based indexing
}

#========= conv1-conv5 ============

layer {
	name: "conv1"
	type: "Convolution"
	bottom: "data"
	top: "conv1"
	convolution_param {
		num_output: 96
		kernel_size: 7
		pad: 3
		stride: 2
	}
}
layer {
	name: "relu1"
	type: "ReLU"
	bottom: "conv1"
	top: "conv1"
}
layer {
	name: "norm1"
	type: "LRN"
	bottom: "conv1"
	top: "norm1"
	lrn_param {
		local_size: 3
		alpha: 0.00005
		beta: 0.75
		norm_region: WITHIN_CHANNEL
    engine: CAFFE
	}
}
layer {
	name: "pool1"
	type: "Pooling"
	bottom: "norm1"
	top: "pool1"
	pooling_param {
		kernel_size: 3
		stride: 2
		pad: 1
		pool: MAX
	}
}
layer {
	name: "conv2"
	type: "Convolution"
	bottom: "pool1"
	top: "conv2"
	convolution_param {
		num_output: 256
		kernel_size: 5
		pad: 2
		stride: 2
	}
}
layer {
	name: "relu2"
	type: "ReLU"
	bottom: "conv2"
	top: "conv2"
}
layer {
	name: "norm2"
	type: "LRN"
	bottom: "conv2"
	top: "norm2"
	lrn_param {
		local_size: 3
		alpha: 0.00005
		beta: 0.75
		norm_region: WITHIN_CHANNEL
    engine: CAFFE
	}
}
layer {
	name: "pool2"
	type: "Pooling"
	bottom: "norm2"
	top: "pool2"
	pooling_param {
		kernel_size: 3
		stride: 2
		pad: 1
		pool: MAX
	}
}
layer {
	name: "conv3"
	type: "Convolution"
	bottom: "pool2"
	top: "conv3"
	convolution_param {
		num_output: 384
		kernel_size: 3
		pad: 1
		stride: 1
	}
}
layer {
	name: "relu3"
	type: "ReLU"
	bottom: "conv3"
	top: "conv3"
}
layer {
	name: "conv4"
	type: "Convolution"
	bottom: "conv3"
	top: "conv4"
	convolution_param {
		num_output: 384
		kernel_size: 3
		pad: 1
		stride: 1
	}
}
layer {
	name: "relu4"
	type: "ReLU"
	bottom: "conv4"
	top: "conv4"
}
layer {
	name: "conv5"
	type: "Convolution"
	bottom: "conv4"
	top: "conv5"
	convolution_param {
		num_output: 256
		kernel_size: 3
		pad: 1
		stride: 1
	}
}
layer {
	name: "relu5"
	type: "ReLU"
	bottom: "conv5"
	top: "conv5"
}

#========= RCNN ============

# Added by Leoyolo
layer {
  name: "roi_dispatch"
  type: "Python"
  bottom: "rois"
  top: "rois_small"
  top: "rois_medium"
  top: "rois_large"
  top: "rois_ind"
  python_param {
    module: "roi_dispatch_layer.layer"
    layer: "RoiDispatchLayer"
    param_str: "{'lower_bound': 32, 'upper_bound': 128}"
  }
}

layer {
  name: "roi_pool_small"
  type: "ROIPooling"
  bottom: "conv5"
  bottom: "rois_small"
  top: "roi_pool_small"
  roi_pooling_param {
    pooled_w: 2
    pooled_h: 2
    spatial_scale: 0.0625
  }
}

layer {
  name: "roi_pool_medium"
  type: "ROIPooling"
  bottom: "conv5"
  bottom: "rois_medium"
  top: "roi_pool_medium"
  roi_pooling_param {
    pooled_w: 4
    pooled_h: 4
    spatial_scale: 0.0625
  }
}

layer {
  name: "roi_pool_large"
  type: "ROIPooling"
  bottom: "conv5"
  bottom: "rois_large"
  top: "roi_pool_large"
  roi_pooling_param {
    pooled_w: 8
    pooled_h: 8
    spatial_scale: 0.0625
  }
}

# layer {
#   name: "roi_pool_conv5"
#   type: "ROIPooling"
#   bottom: "conv5"
#   bottom: "rois"
#   top: "roi_pool_conv5"
#   roi_pooling_param {
#     pooled_w: 6
#     pooled_h: 6
#     spatial_scale: 0.0625 # 1/16
#   }
# }

# ===== upscale small roi ======
layer {
  name: "roi_small_conv1"
  type: "Convolution"
  bottom: "roi_pool_small"
  top: "roi_small_conv1"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 1024
    kernel_size: 1
    pad: 0
    stride: 1
  }
}

layer {
  name: "roi_small_relu1"
  type: "ReLU"
  bottom: "roi_small_conv1"
  top: "roi_small_conv1"
}

layer {
  name: "roi_small_conv2"
  type: "Convolution"
  bottom: "roi_small_conv1"
  top: "roi_small_conv2"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 1024
    kernel_size: 3
    pad: 1
    stride: 1
  }
}

layer {
  name: "roi_small_relu2"
  type: "ReLU"
  bottom: "roi_small_conv2"
  top: "roi_small_conv2"
}

layer {
  name: "roi_small_upscale"
  type: "Deconvolution"
  bottom: "roi_small_conv2"
  top: "roi_small_upscale"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 256
    kernel_size: 4
    pad: 1
    stride: 2
  }
}

layer {
    name: "roi_small_relu3"
    type: "ReLU"
    bottom: "roi_small_upscale"
    top: "roi_small_upscale"
}

layer {
  name: "roi_small_medium"
  type: "Concat"
  bottom: "roi_small_upscale"
  bottom: "roi_pool_medium"
  top: "roi_small_medium"
  concat_param {
    axis: 0
  }
}

# ===== upscale small-medium =====
layer {
  name: "roi_medium_conv1"
  type: "Convolution"
  bottom: "roi_small_medium"
  top: "roi_medium_conv1"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 1024
    kernel_size: 1
    pad: 0
    stride: 1
  }
}

layer {
  name: "roi_medium_relu1"
  type: "ReLU"
  bottom: "roi_medium_conv1"
  top: "roi_medium_conv1"
}

layer {
  name: "roi_medium_conv2"
  type: "Convolution"
  bottom: "roi_medium_conv1"
  top: "roi_medium_conv2"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 1024
    kernel_size: 3
    pad: 1
    stride: 1
  }
}

layer {
  name: "roi_medium_relu2"
  type: "ReLU"
  bottom: "roi_medium_conv2"
  top: "roi_medium_conv2"
}

layer {
  name: "roi_medium_upscale"
  type: "Deconvolution"
  bottom: "roi_medium_conv2"
  top: "roi_medium_upscale"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 256
    kernel_size: 4
    pad: 1
    stride: 2
  }
}

layer {
    name: "roi_medium_relu3"
    type: "ReLU"
    bottom: "roi_medium_upscale"
    top: "roi_medium_upscale"
}

# Concat with large rois
layer {
  name: "roi_small_medium_large"
  type: "Concat"
  bottom: "roi_medium_upscale"
  bottom: "roi_pool_large"
  top: "roi_small_medium_large"
  concat_param {
    axis: 0
  }
}

# Reindex
layer {
  name: "roi_pool_conv5"
  type: "BatchReindex"
  bottom: "roi_small_medium_large"
  bottom: "rois_ind"
  top: "roi_pool_conv5"
}


layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "roi_pool_conv5"
  top: "fc6"
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
    scale_train: false
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
    scale_train: false
  }
}
layer {
  name: "cls_score"
  type: "InnerProduct"
  bottom: "fc7"
  top: "cls_score"
  inner_product_param {
    num_output: 21
  }
}
layer {
  name: "bbox_pred"
  type: "InnerProduct"
  bottom: "fc7"
  top: "bbox_pred"
  inner_product_param {
    num_output: 84
  }
}
layer {
  name: "cls_prob"
  type: "Softmax"
  bottom: "cls_score"
  top: "cls_prob"
  loss_param {
    ignore_label: -1
    normalize: true
  }
}
