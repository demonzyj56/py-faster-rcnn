name: "VGG_ILSVRC_16_layers"
layer {
  name: 'input-data'
  type: 'Python'
  top: 'data'
  top: 'im_info'
  top: 'gt_boxes'
  python_param {
    module: 'roi_data_layer.layer'
    layer: 'RoIDataLayer'
    param_str: "'num_classes': 21"
  }
}

layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}

layer {
  name: "rpn_conv/3x3"
  type: "Convolution"
  bottom: "conv5_3"
  top: "rpn_conv/3x3"
  param { lr_mult: 1.0 decay_mult: 1.0 }
  param { lr_mult: 2.0 decay_mult: 0 }
  convolution_param {
    num_output: 512
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_relu/3x3"
  type: "ReLU"
  bottom: "rpn_conv/3x3"
  top: "rpn_conv/3x3"
}
layer {
  name: "rpn_cls_score"
  type: "Convolution"
  bottom: "rpn_conv/3x3"
  top: "rpn_cls_score"
  param { lr_mult: 1.0 decay_mult: 1.0 }
  param { lr_mult: 2.0 decay_mult: 0 }
  convolution_param {
    num_output: 18   # 2(bg/fg) * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "rpn_transpose"
  type: "Python"
  bottom: "rpn_cls_score"
  top: "rpn_transpose"
  python_param {
    module: "misc.transpose_layer"
    layer: "TransposeLayer"
    param_str: "'num_anchors': 9"
  }
}

layer {
   bottom: "rpn_cls_score"
   top: "rpn_cls_score_reshape"
   name: "rpn_cls_score_reshape"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } }
}

#========= RoI Proposal ============

layer {
  name: "rpn_cls_prob"
  type: "Softmax"
  bottom: "rpn_cls_score_reshape"
  top: "rpn_cls_prob"
}
layer {
  name: 'rpn_cls_prob_reshape'
  type: 'Reshape'
  bottom: 'rpn_cls_prob'
  top: 'rpn_cls_prob_reshape'
  reshape_param { shape { dim: 0 dim: 18 dim: -1 dim: 0 } }
}
# bbox

layer {
  name: "bbox_conv/3x3"
  type: "Convolution"
  bottom: "conv5_3"
  top: "bbox_conv/3x3"
  param { lr_mult: 1.0 decay_mult: 1.0 }
  param { lr_mult: 2.0 decay_mult: 0 }
  convolution_param {
    num_output: 512
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "bbox_relu/3x3"
  type: "ReLU"
  bottom: "bbox_conv/3x3"
  top: "bbox_conv/3x3"
}
layer {
  name: "bbox_delta"
  type: "Convolution"
  bottom: "bbox_conv/3x3"
  top: "bbox_delta"
  param { lr_mult: 1.0 decay_mult: 1.0 }
  param { lr_mult: 2.0 decay_mult: 0 }
  convolution_param {
    num_output: 36
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: 'proposal'
  type: 'Python'
  bottom: 'rpn_cls_prob_reshape'
  bottom: 'bbox_delta'
  bottom: 'im_info'
  top: 'rois'
  top: 'reg_inds'
  python_param {
    module: 'misc.proposal_layer'
    layer: 'ProposalLayer'
    param_str: "'feat_stride': 16"
  }
}


# classification

layer {
  name: "feat_conv/3x3"
  type: "Convolution"
  bottom: "conv5_3"
  top: "feat_conv/3x3"
  param { lr_mult: 1.0 decay_mult: 1.0 }
  param { lr_mult: 2.0 decay_mult: 0 }
  convolution_param {
    num_output: 512
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "feat_relu/3x3"
  type: "ReLU"
  bottom: "feat_conv/3x3"
  top: "feat_conv/3x3"
}

# output: (1x189xHxW)
layer {
  name: "feat_cls_score"
  type: "Convolution"
  bottom: "feat_conv/3x3"
  top: "feat_cls_score"
  param { lr_mult: 1.0 decay_mult: 1.0 }
  param { lr_mult: 2.0 decay_mult: 0 }
  convolution_param {
    num_output: 189 # (20+1)*9
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "feat_transpose"
  type: "Python"
  bottom: "feat_cls_score"
  top: "feat_transpose"
  python_param {
    module: "misc.transpose_layer"
    layer: "TransposeLayer"
    param_str: "'num_anchors': 9"
  }
}

layer {
  name: "cls_filtered"
  type: "BatchReindex"
  bottom: "feat_transpose"
  bottom: "reg_inds"
  top: "cls_filtered"
  propagate_down: true
  propagate_down: false
}


layer {
  name: "rpn_filtered"
  type: "BatchReindex"
  bottom: "rpn_transpose"
  bottom: "reg_inds"
  top: "rpn_filtered"
  propagate_down: true
  propagate_down: false
}

layer {
  name: "bbox_transpose"
  type: "Python"
  bottom: "bbox_delta"
  top: "bbox_transpose"
  python_param {
    module: "misc.transpose_layer"
    layer: "TransposeLayer"
    param_str: "'num_anchors': 9"
  }
}

# layer {
#   name: "bbox_filtered"
#   type: "BatchReindex"
#   bottom: "bbox_transpose"
#   bottom: "reg_inds"
#   top: "bbox_filtered"
#   propagate_down: true
#   propagate_down: false
# }

layer {
  name: "grouth_truth"
  type: "Python"
  bottom: "rois"
  bottom: "gt_boxes"
  top: "gt_objectness"
  top: "gt_delta"
  top: "gt_cls"
  top: "roi_inds"
  python_param {
    module: "misc.ground_truth_layer"
    layer: "GroundTruthLayer"
    param_str: "'overlap': 0.5"
  }
}

# Deal with bbox separately
# layer {
#   name: "bbox_inds"
#   type: "BatchReindex"
#   bottom: "reg_inds"
#   bottom: "roi_inds"
#   top: "bbox_inds"
#   propagate_down: false
#   propagate_down: false
# }

layer {
  name: "bbox_filtered"
  type: "BatchReindex"
  bottom: "bbox_transpose"
  bottom: "roi_inds"
  top: "bbox_filtered"
  propagate_down: true
  propagate_down: false
}


layer {
  name: "loss_objectness_ohem"
  type: "SoftmaxWithLossOHEM"
  bottom: "rpn_filtered"
  bottom: "gt_objectness"
  top: "dummy_loss_obj"
  top: "dummy_prob_obj"
  top: "loss_obj_vec"
  loss_weight: 0
  loss_weight: 0
  loss_weight: 0
  propagate_down: false
  propagate_down: false
}

layer {
  name: "loss_cls_ohem"
  type: "SoftmaxWithLossOHEM"
  bottom: "cls_filtered"
  bottom: "gt_cls"
  top: "dummy_loss_cls"
  top: "dummy_prob_cls"
  top: "loss_cls_vec"
  loss_weight: 0
  loss_weight: 0
  loss_weight: 0
  propagate_down: false
  propagate_down: false
}

layer {
  name: "loss_bbox_ohem"
  type: "SmoothL1LossOHEM"
  bottom: "bbox_filtered"
  bottom: "gt_delta"
  top: "dummy_loss_bbox"
  top: "loss_bbox_vec"
  loss_weight: 0
  loss_weight: 0
  propagate_down: false
  propagate_down: false
}

layer {
  name: "loss_bbox_topN_inds"
  type: "Python"
  bottom: "loss_bbox_vec"
  top: "loss_bbox_topN_inds"
  python_param {
    module: "misc.filter_layer"
    layer: "TopNLayer"
    param_str: "'top_N': 256"
  }
}

# layer {
#   name: "loss_bbox_vec_reshape"
#   type: "Reshape"
#   bottom: "loss_bbox_vec"
#   top: "loss_bbox_vec_reshape"
#   reshape_param {
#     shape {dim: -1}
#   }
# }

layer {
  bottom: "dummy_loss_obj"
  bottom: "dummy_prob_obj"
  bottom: "dummy_loss_cls"
  bottom: "dummy_prob_cls"
  bottom: "dummy_loss_bbox"
  name: "silence"
  type: "Silence"
}

layer {
  bottom: "loss_obj_vec"
  bottom: "loss_cls_vec"
  top: "loss_sum"
  name: "loss_sum"
  type: "Eltwise"
}

layer {
  name: "loss_topN_inds"
  bottom: "loss_sum"
  top: "loss_topN_inds"
  type: "Python"
  python_param {
    module: "misc.filter_layer"
    layer: "TopNLayer"
    param_str: "'top_N': 256"
  }
}

layer {
  name: "rpn_final"
  type: "BatchReindex"
  bottom: "rpn_filtered"
  bottom: "loss_topN_inds"
  top: "rpn_final"
  propagate_down: true
  propagate_down: false
}

layer {
  name: "gt_objectness_final"
  type: "BatchReindex"
  bottom: "gt_objectness"
  bottom: "loss_topN_inds"
  top: "gt_objectness_final"
  propagate_down: false
  propagate_down: false
}

layer {
  name: "cls_final"
  type: "BatchReindex"
  bottom: "cls_filtered"
  bottom: "loss_topN_inds"
  top: "cls_final"
  propagate_down: true
  propagate_down: false
}

layer {
  name: "gt_cls_final"
  type: "BatchReindex"
  bottom: "gt_cls"
  bottom: "loss_topN_inds"
  top: "gt_cls_final"
  propagate_down: false
  propagate_down: false
}

layer {
  name: "bbox_final"
  type: "BatchReindex"
  bottom: "bbox_filtered"
  bottom: "loss_bbox_topN_inds"
  top: "bbox_final"
  propagate_down: true
  propagate_down: false
}

layer {
  name: "gt_delta_final"
  type: "BatchReindex"
  bottom: "gt_delta"
  bottom: "loss_bbox_topN_inds"
  top: "gt_delta_final"
  propagate_down: false
  propagate_down: false
}

layer {
  name: "loss_objectness"
  type: "SoftmaxWithLoss"
  bottom: "rpn_final"
  bottom: "gt_objectness_final"
  top: "loss_objectness"
  loss_weight: 1
  propagate_down: true
  propagate_down: false
}

layer {
  name: "loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "cls_final"
  bottom: "gt_cls_final"
  top: "loss_cls"
  loss_weight: 1
  propagate_down: true
  propagate_down: false
}

layer {
  name: "loss_bbox"
  type: "SmoothL1Loss"
  bottom: "bbox_final"
  bottom: "gt_delta_final"
  top: "loss_bbox"
  loss_weight: 1
  propagate_down: true
  propagate_down: false
}
